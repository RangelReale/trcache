// Code generated by generator, DO NOT EDIT.
package trcache

import "time"

func WithName[K comparable, V any](name string) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case Options[K, V]:
			opt.OptName(name)
			return true
		}
		return false
	})
}
func WithMetrics[K comparable, V any](metrics Metrics, name string) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case MetricsOptions[K, V]:
			opt.OptMetrics(metrics, name)
			return true
		}
		return false
	})
}
func WithCallDefaultDeleteOptions[K comparable, V any](options ...DeleteOption) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case CallDefaultOptions[K, V]:
			opt.OptCallDefaultDeleteOptions(options...)
			return true
		}
		return false
	})
}
func WithCallDefaultGetOptions[K comparable, V any](options ...GetOption) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case CallDefaultOptions[K, V]:
			opt.OptCallDefaultGetOptions(options...)
			return true
		}
		return false
	})
}
func WithCallDefaultSetOptions[K comparable, V any](options ...SetOption) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case CallDefaultOptions[K, V]:
			opt.OptCallDefaultSetOptions(options...)
			return true
		}
		return false
	})
}
func WithCallDefaultRefreshOptions[K comparable, V any](options ...RefreshOption) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case CallDefaultRefreshOptions[K, V]:
			opt.OptCallDefaultRefreshOptions(options...)
			return true
		}
		return false
	})
}
func WithGetCustomOptions[K comparable, V any](customOptions []interface{}) GetOption {
	return GetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case GetOptions[K, V]:
			opt.OptCustomOptions(customOptions)
			return true
		}
		return false
	})
}
func WithSetDuration[K comparable, V any](duration time.Duration) SetOption {
	return SetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case SetOptions[K, V]:
			opt.OptDuration(duration)
			return true
		}
		return false
	})
}
func WithRefreshData[K comparable, V any, RD any](data RD) RefreshOption {
	return RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case RefreshOptions[K, V, RD]:
			opt.OptData(data)
			return true
		}
		return false
	})
}
func WithRefreshFunc[K comparable, V any, RD any](refreshFunc CacheRefreshFunc[K, V, RD]) RefreshOption {
	return RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case RefreshOptions[K, V, RD]:
			opt.OptFunc(refreshFunc)
			return true
		}
		return false
	})
}
func WithRefreshGetOptions[K comparable, V any, RD any](options ...GetOption) RefreshOption {
	return RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case RefreshOptions[K, V, RD]:
			opt.OptGetOptions(options...)
			return true
		}
		return false
	})
}
func WithRefreshSetOptions[K comparable, V any, RD any](options ...SetOption) RefreshOption {
	return RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case RefreshOptions[K, V, RD]:
			opt.OptSetOptions(options...)
			return true
		}
		return false
	})
}
func WithDefaultRefreshFunc[K comparable, V any, RD any](refreshFunc CacheRefreshFunc[K, V, RD]) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case DefaultRefreshOptions[K, V, RD]:
			opt.OptDefaultRefreshFunc(refreshFunc)
			return true
		}
		return false
	})
}

type rootOptionBuilder[K comparable, V any] struct {
	RootOptionBuilderBase
}

func RootOpt[K comparable, V any]() *rootOptionBuilder[K, V] {
	return &rootOptionBuilder[K, V]{}
}
func (ob *rootOptionBuilder[K, V]) WithName(name string) *rootOptionBuilder[K, V] {
	ob.AppendOptions(WithName[K, V](name))
	return ob
}
func (ob *rootOptionBuilder[K, V]) WithMetrics(metrics Metrics, name string) *rootOptionBuilder[K, V] {
	ob.AppendOptions(WithMetrics[K, V](metrics, name))
	return ob
}
func (ob *rootOptionBuilder[K, V]) WithCallDefaultDeleteOptions(options ...DeleteOption) *rootOptionBuilder[K, V] {
	ob.AppendOptions(WithCallDefaultDeleteOptions[K, V](options...))
	return ob
}
func (ob *rootOptionBuilder[K, V]) WithCallDefaultGetOptions(options ...GetOption) *rootOptionBuilder[K, V] {
	ob.AppendOptions(WithCallDefaultGetOptions[K, V](options...))
	return ob
}
func (ob *rootOptionBuilder[K, V]) WithCallDefaultSetOptions(options ...SetOption) *rootOptionBuilder[K, V] {
	ob.AppendOptions(WithCallDefaultSetOptions[K, V](options...))
	return ob
}
func (ob *rootOptionBuilder[K, V]) WithCallDefaultRefreshOptions(options ...RefreshOption) *rootOptionBuilder[K, V] {
	ob.AppendOptions(WithCallDefaultRefreshOptions[K, V](options...))
	return ob
}

type getOptionBuilder[K comparable, V any] struct {
	GetOptionBuilderBase
}

func GetOpt[K comparable, V any]() *getOptionBuilder[K, V] {
	return &getOptionBuilder[K, V]{}
}
func (ob *getOptionBuilder[K, V]) WithGetCustomOptions(customOptions []interface{}) *getOptionBuilder[K, V] {
	ob.AppendOptions(WithGetCustomOptions[K, V](customOptions))
	return ob
}

type setOptionBuilder[K comparable, V any] struct {
	SetOptionBuilderBase
}

func SetOpt[K comparable, V any]() *setOptionBuilder[K, V] {
	return &setOptionBuilder[K, V]{}
}
func (ob *setOptionBuilder[K, V]) WithSetDuration(duration time.Duration) *setOptionBuilder[K, V] {
	ob.AppendOptions(WithSetDuration[K, V](duration))
	return ob
}

type refreshOptionBuilder[K comparable, V any, RD any] struct {
	RefreshOptionBuilderBase
}

func RefreshOpt[K comparable, V any, RD any]() *refreshOptionBuilder[K, V, RD] {
	return &refreshOptionBuilder[K, V, RD]{}
}
func (ob *refreshOptionBuilder[K, V, RD]) WithRefreshData(data RD) *refreshOptionBuilder[K, V, RD] {
	ob.AppendOptions(WithRefreshData[K, V, RD](data))
	return ob
}
func (ob *refreshOptionBuilder[K, V, RD]) WithRefreshFunc(refreshFunc CacheRefreshFunc[K, V, RD]) *refreshOptionBuilder[K, V, RD] {
	ob.AppendOptions(WithRefreshFunc[K, V, RD](refreshFunc))
	return ob
}
func (ob *refreshOptionBuilder[K, V, RD]) WithRefreshGetOptions(options ...GetOption) *refreshOptionBuilder[K, V, RD] {
	ob.AppendOptions(WithRefreshGetOptions[K, V, RD](options...))
	return ob
}
func (ob *refreshOptionBuilder[K, V, RD]) WithRefreshSetOptions(options ...SetOption) *refreshOptionBuilder[K, V, RD] {
	ob.AppendOptions(WithRefreshSetOptions[K, V, RD](options...))
	return ob
}

type rootRefreshOptionBuilder[K comparable, V any, RD any] struct {
	RootOptionBuilderBase
}

func RootRefreshOpt[K comparable, V any, RD any]() *rootRefreshOptionBuilder[K, V, RD] {
	return &rootRefreshOptionBuilder[K, V, RD]{}
}
func (ob *rootRefreshOptionBuilder[K, V, RD]) WithDefaultRefreshFunc(refreshFunc CacheRefreshFunc[K, V, RD]) *rootRefreshOptionBuilder[K, V, RD] {
	ob.AppendOptions(WithDefaultRefreshFunc[K, V, RD](refreshFunc))
	return ob
}
