// Code generated by generator, DO NOT EDIT.
package trcache

import "time"

func WithCallDefaultDeleteOptions[K comparable, V any](p0 ...DeleteOption) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case CallDefaultOptions[K, V]:
			opt.OptCallDefaultDeleteOptions(p0...)
			return true
		}
		return false
	})
}
func WithCallDefaultGetOptions[K comparable, V any](p0 ...GetOption) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case CallDefaultOptions[K, V]:
			opt.OptCallDefaultGetOptions(p0...)
			return true
		}
		return false
	})
}
func WithCallDefaultSetOptions[K comparable, V any](p0 ...SetOption) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case CallDefaultOptions[K, V]:
			opt.OptCallDefaultSetOptions(p0...)
			return true
		}
		return false
	})
}
func WithCallDefaultRefreshOptions[K comparable, V any](p0 ...RefreshOption) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case CallDefaultRefreshOptions[K, V]:
			opt.OptCallDefaultRefreshOptions(p0...)
			return true
		}
		return false
	})
}
func WithGetCustomOptions[K comparable, V any](p0 []interface{}) GetOption {
	return GetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case GetOptions[K, V]:
			opt.OptCustomOptions(p0)
			return true
		}
		return false
	})
}
func WithSetDuration[K comparable, V any](p0 time.Duration) SetOption {
	return SetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case SetOptions[K, V]:
			opt.OptDuration(p0)
			return true
		}
		return false
	})
}
func WithRefreshData[K comparable, V any](p0 interface{}) RefreshOption {
	return RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case RefreshOptions[K, V]:
			opt.OptData(p0)
			return true
		}
		return false
	})
}
func WithRefreshFunc[K comparable, V any](p0 CacheRefreshFunc[K, V]) RefreshOption {
	return RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case RefreshOptions[K, V]:
			opt.OptFunc(p0)
			return true
		}
		return false
	})
}
func WithRefreshSetOptions[K comparable, V any](p0 []SetOption) RefreshOption {
	return RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case RefreshOptions[K, V]:
			opt.OptSetOptions(p0)
			return true
		}
		return false
	})
}
