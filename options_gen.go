// Code generated by troptgen. DO NOT EDIT.

package trcache

import "time"

func WithIgnoreOptionNotSupported[K comparable, V any](ignoreOptionNotSupported bool) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case Options[K, V]:
			opt.OptIgnoreOptionNotSupported(ignoreOptionNotSupported)
			return true
		}
		return false
	})
}
func WithName[K comparable, V any](name string) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case NameOptions[K, V]:
			opt.OptName(name)
			return true
		}
		return false
	})
}
func WithMetrics[K comparable, V any](metrics Metrics, name string) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case MetricsOptions[K, V]:
			opt.OptMetrics(metrics, name)
			return true
		}
		return false
	})
}
func WithCallDefaultDeleteOptions[K comparable, V any](options ...DeleteOption) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case CallDefaultOptions[K, V]:
			opt.OptCallDefaultDeleteOptions(options...)
			return true
		}
		return false
	})
}
func WithCallDefaultGetOptions[K comparable, V any](options ...GetOption) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case CallDefaultOptions[K, V]:
			opt.OptCallDefaultGetOptions(options...)
			return true
		}
		return false
	})
}
func WithCallDefaultSetOptions[K comparable, V any](options ...SetOption) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case CallDefaultOptions[K, V]:
			opt.OptCallDefaultSetOptions(options...)
			return true
		}
		return false
	})
}
func WithCallDefaultRefreshOptions[K comparable, V any](options ...RefreshOption) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case CallDefaultRefreshOptions[K, V]:
			opt.OptCallDefaultRefreshOptions(options...)
			return true
		}
		return false
	})
}
func WithGetIgnoreOptionNotSupported[K comparable, V any](ignoreOptionNotSupported bool) GetOption {
	return GetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case GetOptions[K, V]:
			opt.OptIgnoreOptionNotSupported(ignoreOptionNotSupported)
			return true
		}
		return false
	})
}
func WithSetDuration[K comparable, V any](duration time.Duration) SetOption {
	return SetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case SetOptions[K, V]:
			opt.OptDuration(duration)
			return true
		}
		return false
	})
}
func WithSetIgnoreOptionNotSupported[K comparable, V any](ignoreOptionNotSupported bool) SetOption {
	return SetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case SetOptions[K, V]:
			opt.OptIgnoreOptionNotSupported(ignoreOptionNotSupported)
			return true
		}
		return false
	})
}
func WithDeleteIgnoreOptionNotSupported[K comparable, V any](ignoreOptionNotSupported bool) DeleteOption {
	return DeleteOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case DeleteOptions[K, V]:
			opt.OptIgnoreOptionNotSupported(ignoreOptionNotSupported)
			return true
		}
		return false
	})
}
func WithRefreshData[K comparable, V any, RD any](data RD) RefreshOption {
	return RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case RefreshOptions[K, V, RD]:
			opt.OptData(data)
			return true
		}
		return false
	})
}
func WithRefreshFunc[K comparable, V any, RD any](refreshFunc CacheRefreshFunc[K, V, RD]) RefreshOption {
	return RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case RefreshOptions[K, V, RD]:
			opt.OptFunc(refreshFunc)
			return true
		}
		return false
	})
}
func WithRefreshGetOptions[K comparable, V any, RD any](options ...GetOption) RefreshOption {
	return RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case RefreshOptions[K, V, RD]:
			opt.OptGetOptions(options...)
			return true
		}
		return false
	})
}
func WithRefreshIgnoreOptionNotSupported[K comparable, V any, RD any](ignoreOptionNotSupported bool) RefreshOption {
	return RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case RefreshOptions[K, V, RD]:
			opt.OptIgnoreOptionNotSupported(ignoreOptionNotSupported)
			return true
		}
		return false
	})
}
func WithRefreshSetOptions[K comparable, V any, RD any](options ...SetOption) RefreshOption {
	return RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case RefreshOptions[K, V, RD]:
			opt.OptSetOptions(options...)
			return true
		}
		return false
	})
}
func WithDefaultRefreshFunc[K comparable, V any, RD any](refreshFunc CacheRefreshFunc[K, V, RD]) RootOption {
	return RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case DefaultRefreshOptions[K, V, RD]:
			opt.OptDefaultRefreshFunc(refreshFunc)
			return true
		}
		return false
	})
}
