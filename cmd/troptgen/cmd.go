package main

import (
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"go/types"
	"path/filepath"
	"strings"
	"unicode"

	"github.com/dave/jennifer/jen"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"golang.org/x/tools/go/packages"
)

var prefix = flag.String("prefix", "", "option prefix")

func main() {
	flag.Parse()

	err := runMain()
	if err != nil {
		panic(err)
	}
}

type specValue struct {
	typ     *ast.TypeSpec
	comment *ast.Comment
}

const directive = "+troptgen"
const directiveLine = "// +troptgen"
const rootPackage = "github.com/RangelReale/trcache"

func runMain() error {

	cfg := packages.Config{
		Mode: packages.NeedName | packages.NeedImports | packages.NeedDeps | packages.NeedTypes |
			packages.NeedSyntax | packages.NeedTypesInfo,
		ParseFile: func(fset *token.FileSet, filename string, src []byte) (*ast.File, error) {
			return parser.ParseFile(fset, filename, src, parser.ParseComments)
		},
	}

	pkgs, err := packages.Load(&cfg, "./")
	if err != nil {
		return fmt.Errorf("cannot load %q: %w", "./", err)
	}
	if len(pkgs) != 1 {
		return fmt.Errorf("packages.Load returned %d packages, not 1", len(pkgs))
	}

	pkg := pkgs[0]

	specs := make(map[string][]specValue)

	for _, syntax := range pkg.Syntax {
		s := getTaggedComments(syntax, directive)
		for _, sp := range s {
			filename := pkg.Fset.Position(syntax.Package).Filename
			fn, ok := specs[filename]
			if !ok {
				fn = []specValue{}
				specs[filename] = fn
			}
			specs[filename] = append(specs[filename], sp)
		}
	}

	for filename, fnspecs := range specs {
		dir, file := filepath.Split(filename)
		newfile := filepath.Join(dir, fmt.Sprintf("%s_gen%s", strings.TrimSuffix(file, filepath.Ext(filename)), filepath.Ext(filename)))

		f := jen.NewFilePathName(pkg.PkgPath, pkg.Name)
		f.PackageComment("Code generated by generator, DO NOT EDIT.")

		optionsimpltype := map[string]*jen.Statement{}
		optionsimpl := map[string]*jen.Statement{}
		optionsimplfuncs := map[string]*jen.Statement{}
		optionsfuncs := map[string]*jen.Statement{}
		optionsbuilder := map[string]*jen.Statement{}

		for _, stype := range fnspecs {
			obj := pkg.Types.Scope().Lookup(stype.typ.Name.Name)
			if obj == nil {
				continue
			}

			// root, get, set, delete, refresh
			directiveCmd := strings.TrimSpace(strings.TrimPrefix(stype.comment.Text, directiveLine))
			UCDirectiveCMD := cases.Title(language.Und).String(directiveCmd)
			UCDirectiveCMDOptional := cases.Title(language.Und).String(directiveCmd)
			if directiveCmd == "root" {
				UCDirectiveCMDOptional = ""
			}

			// only named interface types are supported
			namedType, ok := obj.Type().(*types.Named)
			if !ok {
				return fmt.Errorf("only interface types are supported: %s", obj.String())
			}

			if *prefix != "" && !strings.HasPrefix(namedType.Obj().Name(), *prefix) {
				continue
			}

			interfaceType, ok := namedType.Underlying().(*types.Interface)
			if !ok {
				return fmt.Errorf("only interface types are supported: %s", obj.String())
			}

			_, optiok := optionsimpl[directiveCmd]
			if !optiok {
				optionsimpl[directiveCmd] = &jen.Statement{}
			}

			_, optifok := optionsimplfuncs[directiveCmd]
			if !optifok {
				optionsimplfuncs[directiveCmd] = &jen.Statement{}
			}

			_, optfok := optionsfuncs[directiveCmd]
			if !optfok {
				optionsfuncs[directiveCmd] = &jen.Statement{}
			}

			_, optbok := optionsbuilder[directiveCmd]
			if !optbok {
				optionsBuilderName := fmt.Sprintf("%s%sOptionBuilder", *prefix, UCDirectiveCMD)

				optionsbuilder[directiveCmd] = &jen.Statement{}
				optionsbuilder[directiveCmd].Add(
					jen.Type().Id(optionsBuilderName).
						Add(FromTypeParams(namedType.TypeParams())).
						Struct(
							jen.Qual(rootPackage, fmt.Sprintf("%sOptionBuilderBase", UCDirectiveCMD)),
						),
				)
				optionsbuilder[directiveCmd].Add(
					jen.Func().Id(fmt.Sprintf("%sOpt", UCDirectiveCMD)).
						Add(FromTypeParams(namedType.TypeParams())).
						Params().
						Id(fmt.Sprintf("*%s", optionsBuilderName)).Add(CallFromTypeParams(namedType.TypeParams())).
						Block(
							jen.Return(
								jen.Id(fmt.Sprintf("&%s", optionsBuilderName)).Add(CallFromTypeParams(namedType.TypeParams())).Values(jen.Dict{}),
							),
						),
				)
			}

			isImpl := false
			for i := 0; i < interfaceType.NumEmbeddeds(); i++ {
				et := interfaceType.EmbeddedType(i)
				fmt.Println(et.String())
				if etNamedType, ok := et.(*types.Named); ok {
					if etNamedType.Obj().Pkg().Path() == rootPackage &&
						etNamedType.Obj().Name() == fmt.Sprintf("Is%sOptions", UCDirectiveCMD) {
						isImpl = true
						break
					}
				}
			}

			if isImpl {
				if _, itok := optionsimpltype[directiveCmd]; !itok {
					optionsimpltype[directiveCmd] = jen.
						Type().
						Id(MakeFirstLowerCase(namedType.Obj().Name())).
						Add(FromTypeParams(namedType.TypeParams()))
				}

				optionsimpl[directiveCmd].Add(
					jen.Qual(rootPackage, fmt.Sprintf("Is%sOptionsImpl", UCDirectiveCMD)),
				)
			}

			for i := 0; i < interfaceType.NumExplicitMethods(); i++ {
				method := interfaceType.ExplicitMethod(i)

				if !method.Exported() {
					continue
				}

				methodName := fmt.Sprintf("With%s%s%s", *prefix, UCDirectiveCMDOptional, strings.TrimPrefix(method.Name(), "Opt"))
				fsig := method.Type().(*types.Signature)

				// add implementation field to struct
				if isImpl && fsig.Params().Len() > 0 {
					implFieldName := MakeFirstLowerCase(strings.TrimPrefix(method.Name(), "Opt"))
					optionsimpl[directiveCmd].Add(
						jen.Id(implFieldName).Add(QualFromType(fsig.Params().At(0).Type())),
					)
				}

				// generate a "With" function for each interface method
				optionsfuncs[directiveCmd].Add(
					jen.Func().Id(methodName).
						Add(FromTypeParams(namedType.TypeParams())).
						Add(FromParams(fsig.Params(), fsig.Variadic())).
						Qual(rootPackage, fmt.Sprintf("%sOption", UCDirectiveCMD)).
						Block(
							jen.Return(
								jen.Qual(rootPackage, fmt.Sprintf("%sOptionFunc", UCDirectiveCMD)).Call(
									jen.Func().
										Params(jen.Id("o").Id("any")).
										Bool().
										BlockFunc(func(g *jen.Group) {
											g.Switch(jen.Id("opt").Op(":=").Id("o.(type)").Block(
												jen.Case(QualFromType(namedType)).Block(
													jen.Id("opt").Dot(method.Name()).Add(CallFromParams(fsig.Params(), fsig.Variadic())),
												),
												jen.Return(jen.True()),
											))

											g.Return(jen.False())
										})),
							),
						),
				)

				// generate an "OptionsBuilder" method for each interface method
				optionsBuilderName := fmt.Sprintf("%s%sOptionBuilder", *prefix, UCDirectiveCMD)

				optionsbuilder[directiveCmd].Add(
					jen.Func().
						Params(jen.Id("ob").Id(fmt.Sprintf("*%s", optionsBuilderName)).Add(CallFromTypeParams(namedType.TypeParams()))).
						Id(methodName).
						Add(FromParams(fsig.Params(), fsig.Variadic())).
						Id(fmt.Sprintf("*%s", optionsBuilderName)).Add(CallFromTypeParams(namedType.TypeParams())).
						Block(
							jen.Id("ob").Dot("AppendOptions").Call(
								jen.Id(methodName).Add(CallFromTypeParams(namedType.TypeParams()).
									Add(CallFromParams(fsig.Params(), fsig.Variadic())),
								),
							),
							jen.Return(
								jen.Id("ob"),
							),
						),
				)
			}
		}

		cmds := []string{"root", "get", "set", "delete", "refresh"}

		// generate an impl struct for each interface method
		for _, d := range cmds {
			ob, ok := optionsimpl[d]
			if !ok {
				continue
			}

			if len(*ob) > 0 {
				// f.Add(optionsimpltype[d].Struct(ob))
				f.Add(optionsimpltype[d].StructFunc(func(g *jen.Group) {
					for _, obi := range *ob {
						g.Add(obi)
					}
				}))
			}

			// for _, obi := range *ob {
			// 	f.Add(obi)
			// }
		}

		// generate an options func for each interface method
		for _, d := range cmds {
			ob, ok := optionsfuncs[d]
			if !ok {
				continue
			}

			for _, obi := range *ob {
				f.Add(obi)
			}
		}

		// generate an options builder for each interface method
		for _, d := range cmds {
			ob, ok := optionsbuilder[d]
			if !ok {
				continue
			}

			// first 2 are initialization, if only 2 don't add the codes
			if len(*ob) > 2 {
				for _, obi := range *ob {
					f.Add(obi)
				}
			}
		}

		err = f.Save(newfile)
		if err != nil {
			return err
		}
	}

	return nil
}

// getTaggedComments walks the AST and returns types which have directive comment
// returns a map of TypeSpec to directive
func getTaggedComments(pkg ast.Node, directive string) []specValue {
	var specs []specValue

	ast.Inspect(pkg, func(n ast.Node) bool {
		g, ok := n.(*ast.GenDecl)

		// is it a type?
		// http://golang.org/pkg/go/ast/#GenDecl
		if !ok || g.Tok != token.TYPE {
			// never mind, move on
			return true
		}

		if g.Lparen == 0 {
			// not parenthesized, copy GenDecl.Doc into TypeSpec.Doc
			g.Specs[0].(*ast.TypeSpec).Doc = g.Doc
		}

		for _, s := range g.Specs {
			t := s.(*ast.TypeSpec)

			if c := findAnnotation(t.Doc, directive); c != nil {
				specs = append(specs, specValue{
					typ:     t,
					comment: c,
				})
			}
		}

		// no need to keep walking, we don't care about TypeSpec's children
		return false
	})

	return specs
}

// findDirective return the first line of a doc which contains a directive
// the directive and '//' are removed
func findAnnotation(doc *ast.CommentGroup, directive string) *ast.Comment {
	if doc == nil {
		return nil
	}

	// check lines of doc for directive
	for _, c := range doc.List {
		l := c.Text
		// does the line start with the directive?
		t := strings.TrimLeft(l, "/ ")
		if !strings.HasPrefix(t, directive) {
			continue
		}

		// remove the directive from the line
		t = strings.TrimPrefix(t, directive)

		// must be eof or followed by a space
		if len(t) > 0 && t[0] != ' ' {
			continue
		}

		return c
	}

	return nil
}

func MakeFirstLowerCase(s string) string {
	if len(s) == 0 {
		return s
	}

	r := []rune(s)
	r[0] = unicode.ToLower(r[0])
	return string(r)
}
