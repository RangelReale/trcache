// Code generated by generator, DO NOT EDIT.
package wrap

import trcache "github.com/RangelReale/trcache"

func WithCallDefaultRefreshOptions[K comparable, V any](options ...trcache.RefreshOption) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case WrapRefreshOptions[K, V]:
			opt.OptCallDefaultRefreshOptions(options...)
			return true
		}
		return false
	})
}
func WithDefaultRefreshFunc[K comparable, V any](refreshFunc trcache.CacheRefreshFunc[K, V]) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case WrapRefreshOptions[K, V]:
			opt.OptDefaultRefreshFunc(refreshFunc)
			return true
		}
		return false
	})
}
func WithRefreshData[K comparable, V any](data interface{}) trcache.RefreshOption {
	return trcache.RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case WrapRefreshRefreshOptions[K, V]:
			opt.OptData(data)
			return true
		}
		return false
	})
}
func WithRefreshRefreshFunc[K comparable, V any](refreshFunc trcache.CacheRefreshFunc[K, V]) trcache.RefreshOption {
	return trcache.RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case WrapRefreshRefreshOptions[K, V]:
			opt.OptRefreshFunc(refreshFunc)
			return true
		}
		return false
	})
}
func WithRefreshSetOptions[K comparable, V any](options ...trcache.SetOption) trcache.RefreshOption {
	return trcache.RefreshOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case WrapRefreshRefreshOptions[K, V]:
			opt.OptSetOptions(options...)
			return true
		}
		return false
	})
}

type RootOptionBuilder[K comparable, V any] struct {
	trcache.RootOptionBuilderBase
}

func RootOpt[K comparable, V any]() *RootOptionBuilder[K, V] {
	return &RootOptionBuilder[K, V]{}
}
func (ob *RootOptionBuilder[K, V]) WithCallDefaultRefreshOptions(options ...trcache.RefreshOption) *RootOptionBuilder[K, V] {
	ob.AppendOptions(WithCallDefaultRefreshOptions[K, V](options...))
	return ob
}
func (ob *RootOptionBuilder[K, V]) WithDefaultRefreshFunc(refreshFunc trcache.CacheRefreshFunc[K, V]) *RootOptionBuilder[K, V] {
	ob.AppendOptions(WithDefaultRefreshFunc[K, V](refreshFunc))
	return ob
}

type RefreshOptionBuilder[K comparable, V any] struct {
	trcache.RefreshOptionBuilderBase
}

func RefreshOpt[K comparable, V any]() *RefreshOptionBuilder[K, V] {
	return &RefreshOptionBuilder[K, V]{}
}
func (ob *RefreshOptionBuilder[K, V]) WithRefreshData(data interface{}) *RefreshOptionBuilder[K, V] {
	ob.AppendOptions(WithRefreshData[K, V](data))
	return ob
}
func (ob *RefreshOptionBuilder[K, V]) WithRefreshRefreshFunc(refreshFunc trcache.CacheRefreshFunc[K, V]) *RefreshOptionBuilder[K, V] {
	ob.AppendOptions(WithRefreshRefreshFunc[K, V](refreshFunc))
	return ob
}
func (ob *RefreshOptionBuilder[K, V]) WithRefreshSetOptions(options ...trcache.SetOption) *RefreshOptionBuilder[K, V] {
	ob.AppendOptions(WithRefreshSetOptions[K, V](options...))
	return ob
}
