// Code generated by troptgen. DO NOT EDIT.

package wrap

import trcache "github.com/RangelReale/trcache"

type RootOption = trcache.RootOption

func WithWrapCallDefaultRefreshOptions[K comparable, V any, RD any](options ...trcache.RefreshOption) RootOption {
	return trcache.WithCallDefaultRefreshOptions[K, V](options...)
}
func WithWrapDefaultRefreshFunc[K comparable, V any, RD any](refreshFunc trcache.CacheRefreshFunc[K, V, RD]) RootOption {
	return trcache.WithDefaultRefreshFunc[K, V, RD](refreshFunc)
}
func WithWrapMetrics[K comparable, V any, RD any](metrics trcache.Metrics, name string) RootOption {
	return trcache.WithMetrics[K, V](metrics, name)
}

type RefreshOption = trcache.RefreshOption

func WithWrapRefreshData[K comparable, V any, RD any](data RD) RefreshOption {
	return trcache.WithRefreshData[K, V, RD](data)
}
func WithWrapRefreshFunc[K comparable, V any, RD any](refreshFunc trcache.CacheRefreshFunc[K, V, RD]) RefreshOption {
	return trcache.WithRefreshFunc[K, V, RD](refreshFunc)
}
func WithWrapRefreshGetOptions[K comparable, V any, RD any](options ...trcache.GetOption) RefreshOption {
	return trcache.WithRefreshGetOptions[K, V, RD](options...)
}
func WithWrapRefreshSetOptions[K comparable, V any, RD any](options ...trcache.SetOption) RefreshOption {
	return trcache.WithRefreshSetOptions[K, V, RD](options...)
}

type wrapRefreshOptionsImpl[K comparable, V any, RD any] struct {
	trcache.IsRootOptionsImpl
	callDefaultRefreshOptions []trcache.RefreshOption
	defaultRefreshFunc        trcache.CacheRefreshFunc[K, V, RD]
	metricsMetrics            trcache.Metrics
	metricsName               string
}

var _ wrapRefreshOptions[string, string, string] = &wrapRefreshOptionsImpl[string, string, string]{}

func (o *wrapRefreshOptionsImpl[K, V, RD]) OptCallDefaultRefreshOptions(options ...trcache.RefreshOption) {
	o.callDefaultRefreshOptions = options
}
func (o *wrapRefreshOptionsImpl[K, V, RD]) OptDefaultRefreshFunc(refreshFunc trcache.CacheRefreshFunc[K, V, RD]) {
	o.defaultRefreshFunc = refreshFunc
}
func (o *wrapRefreshOptionsImpl[K, V, RD]) OptMetrics(metrics trcache.Metrics, name string) {
	o.metricsMetrics = metrics
	o.metricsName = name
}

type wrapRefreshRefreshOptionsImpl[K comparable, V any, RD any] struct {
	trcache.IsRefreshOptionsImpl
	data       RD
	funcx      trcache.CacheRefreshFunc[K, V, RD]
	getOptions []trcache.GetOption
	setOptions []trcache.SetOption
}

var _ wrapRefreshRefreshOptions[string, string, string] = &wrapRefreshRefreshOptionsImpl[string, string, string]{}

func (o *wrapRefreshRefreshOptionsImpl[K, V, RD]) OptData(data RD) {
	o.data = data
}
func (o *wrapRefreshRefreshOptionsImpl[K, V, RD]) OptFunc(refreshFunc trcache.CacheRefreshFunc[K, V, RD]) {
	o.funcx = refreshFunc
}
func (o *wrapRefreshRefreshOptionsImpl[K, V, RD]) OptGetOptions(options ...trcache.GetOption) {
	o.getOptions = options
}
func (o *wrapRefreshRefreshOptionsImpl[K, V, RD]) OptSetOptions(options ...trcache.SetOption) {
	o.setOptions = options
}
