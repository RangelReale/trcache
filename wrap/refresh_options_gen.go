// Code generated by generator, DO NOT EDIT.
package wrap

import trcache "github.com/RangelReale/trcache"

func WithWrapDefaultRefreshFunc[K comparable, V any](refreshFunc trcache.CacheRefreshFunc[K, V]) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case WrapRefreshOptions[K, V]:
			opt.OptDefaultRefreshFunc(refreshFunc)
			return true
		}
		return false
	})
}

type WrapRootOptionBuilder[K comparable, V any] struct {
	trcache.RootOptionBuilderBase
}

func RootOpt[K comparable, V any]() *WrapRootOptionBuilder[K, V] {
	return &WrapRootOptionBuilder[K, V]{}
}
func (ob *WrapRootOptionBuilder[K, V]) WithWrapDefaultRefreshFunc(refreshFunc trcache.CacheRefreshFunc[K, V]) *WrapRootOptionBuilder[K, V] {
	ob.AppendOptions(WithWrapDefaultRefreshFunc[K, V](refreshFunc))
	return ob
}
