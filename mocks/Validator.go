// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Validator is an autogenerated mock type for the Validator type
type Validator[V interface{}] struct {
	mock.Mock
}

type Validator_Expecter[V interface{}] struct {
	mock *mock.Mock
}

func (_m *Validator[V]) EXPECT() *Validator_Expecter[V] {
	return &Validator_Expecter[V]{mock: &_m.Mock}
}

// ValidateGet provides a mock function with given fields: ctx, data
func (_m *Validator[V]) ValidateGet(ctx context.Context, data V) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, V) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validator_ValidateGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateGet'
type Validator_ValidateGet_Call[V interface{}] struct {
	*mock.Call
}

// ValidateGet is a helper method to define mock.On call
//   - ctx context.Context
//   - data V
func (_e *Validator_Expecter[V]) ValidateGet(ctx interface{}, data interface{}) *Validator_ValidateGet_Call[V] {
	return &Validator_ValidateGet_Call[V]{Call: _e.mock.On("ValidateGet", ctx, data)}
}

func (_c *Validator_ValidateGet_Call[V]) Run(run func(ctx context.Context, data V)) *Validator_ValidateGet_Call[V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(V))
	})
	return _c
}

func (_c *Validator_ValidateGet_Call[V]) Return(_a0 error) *Validator_ValidateGet_Call[V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_ValidateGet_Call[V]) RunAndReturn(run func(context.Context, V) error) *Validator_ValidateGet_Call[V] {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewValidator interface {
	mock.TestingT
	Cleanup(func())
}

// NewValidator creates a new instance of Validator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewValidator[V interface{}](t mockConstructorTestingTNewValidator) *Validator[V] {
	mock := &Validator[V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
