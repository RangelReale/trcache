// Code generated by generator, DO NOT EDIT.
package chain

import (
	trcache "github.com/RangelReale/trcache"
	"time"
)

func WithCallDefaultDeleteOptions[K comparable, V any](options ...trcache.DeleteOption) trcache.RootOption {
	return trcache.WithCallDefaultDeleteOptions[K, V](options...)
}
func WithCallDefaultGetOptions[K comparable, V any](options ...trcache.GetOption) trcache.RootOption {
	return trcache.WithCallDefaultGetOptions[K, V](options...)
}
func WithCallDefaultSetOptions[K comparable, V any](options ...trcache.SetOption) trcache.RootOption {
	return trcache.WithCallDefaultSetOptions[K, V](options...)
}
func WithName[K comparable, V any](name string) trcache.RootOption {
	return trcache.WithName[K, V](name)
}
func WithGetCustomOptions[K comparable, V any](customOptions []interface{}) trcache.GetOption {
	return trcache.WithGetCustomOptions[K, V](customOptions)
}
func WithGetGetStrategy[K comparable, V any](getStrategy GetStrategy[K, V]) trcache.GetOption {
	return trcache.GetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case getOptions[K, V]:
			opt.OptGetStrategy(getStrategy)
			return true
		}
		return false
	})
}
func WithGetSetOptions[K comparable, V any](options ...trcache.SetOption) trcache.GetOption {
	return trcache.GetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case getOptions[K, V]:
			opt.OptSetOptions(options...)
			return true
		}
		return false
	})
}
func WithSetDuration[K comparable, V any](duration time.Duration) trcache.SetOption {
	return trcache.WithSetDuration[K, V](duration)
}
func WithSetSetStrategy[K comparable, V any](setStrategy SetStrategy[K, V]) trcache.SetOption {
	return trcache.SetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case setOptions[K, V]:
			opt.OptSetStrategy(setStrategy)
			return true
		}
		return false
	})
}
func WithDeleteDeleteStrategy[K comparable, V any](deleteStrategy DeleteStrategy[K, V]) trcache.DeleteOption {
	return trcache.DeleteOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case deleteOptions[K, V]:
			opt.OptDeleteStrategy(deleteStrategy)
			return true
		}
		return false
	})
}

type rootOptionsImpl[K comparable, V any] struct {
	trcache.IsRootOptionsImpl
	callDefaultDeleteOptions []trcache.DeleteOption
	callDefaultGetOptions    []trcache.GetOption
	callDefaultSetOptions    []trcache.SetOption
	name                     string
}

var _ options[string, string] = &rootOptionsImpl[string, string]{}

func (o *rootOptionsImpl[K, V]) OptCallDefaultDeleteOptions(options ...trcache.DeleteOption) {
	o.callDefaultDeleteOptions = options
}
func (o *rootOptionsImpl[K, V]) OptCallDefaultGetOptions(options ...trcache.GetOption) {
	o.callDefaultGetOptions = options
}
func (o *rootOptionsImpl[K, V]) OptCallDefaultSetOptions(options ...trcache.SetOption) {
	o.callDefaultSetOptions = options
}
func (o *rootOptionsImpl[K, V]) OptName(name string) {
	o.name = name
}

type getOptionsImpl[K comparable, V any] struct {
	trcache.IsGetOptionsImpl
	customOptions []interface{}
	getStrategy   GetStrategy[K, V]
	setOptions    []trcache.SetOption
}

var _ getOptions[string, string] = &getOptionsImpl[string, string]{}

func (o *getOptionsImpl[K, V]) OptCustomOptions(customOptions []interface{}) {
	o.customOptions = customOptions
}
func (o *getOptionsImpl[K, V]) OptGetStrategy(getStrategy GetStrategy[K, V]) {
	o.getStrategy = getStrategy
}
func (o *getOptionsImpl[K, V]) OptSetOptions(options ...trcache.SetOption) {
	o.setOptions = options
}

type setOptionsImpl[K comparable, V any] struct {
	trcache.IsSetOptionsImpl
	duration    time.Duration
	setStrategy SetStrategy[K, V]
}

var _ setOptions[string, string] = &setOptionsImpl[string, string]{}

func (o *setOptionsImpl[K, V]) OptDuration(duration time.Duration) {
	o.duration = duration
}
func (o *setOptionsImpl[K, V]) OptSetStrategy(setStrategy SetStrategy[K, V]) {
	o.setStrategy = setStrategy
}

type deleteOptionsImpl[K comparable, V any] struct {
	trcache.IsDeleteOptionsImpl
	deleteStrategy DeleteStrategy[K, V]
}

var _ deleteOptions[string, string] = &deleteOptionsImpl[string, string]{}

func (o *deleteOptionsImpl[K, V]) OptDeleteStrategy(deleteStrategy DeleteStrategy[K, V]) {
	o.deleteStrategy = deleteStrategy
}
