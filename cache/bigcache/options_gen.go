// Code generated by generator, DO NOT EDIT.
package trbigcache

import (
	trcache "github.com/RangelReale/trcache"
	"time"
)

func WithDefaultDuration[K comparable, V any](duration time.Duration) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case options[K, V]:
			opt.OptDefaultDuration(duration)
			return true
		}
		return false
	})
}
func WithKeyCodec[K comparable, V any](keyCodec trcache.KeyCodec[K]) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case options[K, V]:
			opt.OptKeyCodec(keyCodec)
			return true
		}
		return false
	})
}
func WithValidator[K comparable, V any](validator trcache.Validator[V]) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case options[K, V]:
			opt.OptValidator(validator)
			return true
		}
		return false
	})
}
func WithValueCodec[K comparable, V any](valueCodec trcache.Codec[V]) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case options[K, V]:
			opt.OptValueCodec(valueCodec)
			return true
		}
		return false
	})
}

type rootOptionBuilder[K comparable, V any] struct {
	trcache.RootOptionBuilderBase
}

func RootOpt[K comparable, V any]() *rootOptionBuilder[K, V] {
	return &rootOptionBuilder[K, V]{}
}
func (ob *rootOptionBuilder[K, V]) WithDefaultDuration(duration time.Duration) *rootOptionBuilder[K, V] {
	ob.AppendOptions(WithDefaultDuration[K, V](duration))
	return ob
}
func (ob *rootOptionBuilder[K, V]) WithKeyCodec(keyCodec trcache.KeyCodec[K]) *rootOptionBuilder[K, V] {
	ob.AppendOptions(WithKeyCodec[K, V](keyCodec))
	return ob
}
func (ob *rootOptionBuilder[K, V]) WithValidator(validator trcache.Validator[V]) *rootOptionBuilder[K, V] {
	ob.AppendOptions(WithValidator[K, V](validator))
	return ob
}
func (ob *rootOptionBuilder[K, V]) WithValueCodec(valueCodec trcache.Codec[V]) *rootOptionBuilder[K, V] {
	ob.AppendOptions(WithValueCodec[K, V](valueCodec))
	return ob
}

type rootOptionsImpl[K comparable, V any] struct {
	trcache.IsRootOptionsImpl
	callDefaultDeleteOptions []trcache.DeleteOption
	callDefaultGetOptions    []trcache.GetOption
	callDefaultSetOptions    []trcache.SetOption
	defaultDuration          time.Duration
	keyCodec                 trcache.KeyCodec[K]
	name                     string
	validator                trcache.Validator[V]
	valueCodec               trcache.Codec[V]
}

var _ options[string, string] = &rootOptionsImpl[string, string]{}

func (o *rootOptionsImpl[K, V]) OptCallDefaultDeleteOptions(options ...trcache.DeleteOption) {
	o.callDefaultDeleteOptions = options
}
func (o *rootOptionsImpl[K, V]) OptCallDefaultGetOptions(options ...trcache.GetOption) {
	o.callDefaultGetOptions = options
}
func (o *rootOptionsImpl[K, V]) OptCallDefaultSetOptions(options ...trcache.SetOption) {
	o.callDefaultSetOptions = options
}
func (o *rootOptionsImpl[K, V]) OptDefaultDuration(duration time.Duration) {
	o.defaultDuration = duration
}
func (o *rootOptionsImpl[K, V]) OptKeyCodec(keyCodec trcache.KeyCodec[K]) {
	o.keyCodec = keyCodec
}
func (o *rootOptionsImpl[K, V]) OptName(name string) {
	o.name = name
}
func (o *rootOptionsImpl[K, V]) OptValidator(validator trcache.Validator[V]) {
	o.validator = validator
}
func (o *rootOptionsImpl[K, V]) OptValueCodec(valueCodec trcache.Codec[V]) {
	o.valueCodec = valueCodec
}

type getOptionsImpl[K comparable, V any] struct {
	trcache.IsGetOptionsImpl
	customOptions []interface{}
}

var _ getOptions[string, string] = &getOptionsImpl[string, string]{}

func (o *getOptionsImpl[K, V]) OptCustomOptions(customOptions []interface{}) {
	o.customOptions = customOptions
}

type setOptionsImpl[K comparable, V any] struct {
	trcache.IsSetOptionsImpl
	duration time.Duration
}

var _ setOptions[string, string] = &setOptionsImpl[string, string]{}

func (o *setOptionsImpl[K, V]) OptDuration(duration time.Duration) {
	o.duration = duration
}

type deleteOptionsImpl[K comparable, V any] struct {
	trcache.IsDeleteOptionsImpl
}

var _ deleteOptions[string, string] = &deleteOptionsImpl[string, string]{}
