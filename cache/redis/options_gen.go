// Code generated by generator, DO NOT EDIT.
package trredis

import (
	trcache "github.com/RangelReale/trcache"
	"time"
)

func WithCallDefaultDeleteOptions[K comparable, V any](p0 ...trcache.DeleteOption) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case Options[K, V]:
			opt.OptCallDefaultDeleteOptions(p0...)
			return true
		}
		return false
	})
}
func WithCallDefaultGetOptions[K comparable, V any](p0 ...trcache.GetOption) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case Options[K, V]:
			opt.OptCallDefaultGetOptions(p0...)
			return true
		}
		return false
	})
}
func WithCallDefaultSetOptions[K comparable, V any](p0 ...trcache.SetOption) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case Options[K, V]:
			opt.OptCallDefaultSetOptions(p0...)
			return true
		}
		return false
	})
}
func WithDefaultDuration[K comparable, V any](p0 time.Duration) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case Options[K, V]:
			opt.OptDefaultDuration(p0)
			return true
		}
		return false
	})
}
func WithKeyCodec[K comparable, V any](p0 trcache.KeyCodec[K]) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case Options[K, V]:
			opt.OptKeyCodec(p0)
			return true
		}
		return false
	})
}
func WithName[K comparable, V any](p0 string) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case Options[K, V]:
			opt.OptName(p0)
			return true
		}
		return false
	})
}
func WithRedisDelFunc[K comparable, V any](p0 RedisDelFunc[K, V]) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case Options[K, V]:
			opt.OptRedisDelFunc(p0)
			return true
		}
		return false
	})
}
func WithRedisGetFunc[K comparable, V any](p0 RedisGetFunc[K, V]) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case Options[K, V]:
			opt.OptRedisGetFunc(p0)
			return true
		}
		return false
	})
}
func WithRedisSetFunc[K comparable, V any](p0 RedisSetFunc[K, V]) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case Options[K, V]:
			opt.OptRedisSetFunc(p0)
			return true
		}
		return false
	})
}
func WithValidator[K comparable, V any](p0 trcache.Validator[V]) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case Options[K, V]:
			opt.OptValidator(p0)
			return true
		}
		return false
	})
}
func WithValueCodec[K comparable, V any](p0 trcache.Codec[V]) trcache.RootOption {
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case Options[K, V]:
			opt.OptValueCodec(p0)
			return true
		}
		return false
	})
}
func WithGetCustomOptions[K comparable, V any](p0 []interface{}) trcache.GetOption {
	return trcache.GetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case GetOptions[K, V]:
			opt.OptCustomOptions(p0)
			return true
		}
		return false
	})
}
func WithGetCustomParams[K comparable, V any](p0 interface{}) trcache.GetOption {
	return trcache.GetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case GetOptions[K, V]:
			opt.OptCustomParams(p0)
			return true
		}
		return false
	})
}
func WithGetRedisGetFunc[K comparable, V any](p0 RedisGetFunc[K, V]) trcache.GetOption {
	return trcache.GetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case GetOptions[K, V]:
			opt.OptRedisGetFunc(p0)
			return true
		}
		return false
	})
}
func WithSetCustomParams[K comparable, V any](p0 interface{}) trcache.SetOption {
	return trcache.SetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case SetOptions[K, V]:
			opt.OptCustomParams(p0)
			return true
		}
		return false
	})
}
func WithSetDuration[K comparable, V any](p0 time.Duration) trcache.SetOption {
	return trcache.SetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case SetOptions[K, V]:
			opt.OptDuration(p0)
			return true
		}
		return false
	})
}
func WithSetRedisSetFunc[K comparable, V any](p0 RedisSetFunc[K, V]) trcache.SetOption {
	return trcache.SetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case SetOptions[K, V]:
			opt.OptRedisSetFunc(p0)
			return true
		}
		return false
	})
}
func WithDeleteCustomParams[K comparable, V any](p0 interface{}) trcache.DeleteOption {
	return trcache.DeleteOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case DeleteOptions[K, V]:
			opt.OptCustomParams(p0)
			return true
		}
		return false
	})
}
func WithDeleteRedisDelFunc[K comparable, V any](p0 RedisDelFunc[K, V]) trcache.DeleteOption {
	return trcache.DeleteOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case DeleteOptions[K, V]:
			opt.OptRedisDelFunc(p0)
			return true
		}
		return false
	})
}

type RootOptionBuilder[K comparable, V any] struct {
	trcache.RootOptionBuilderBase
}

func RootOpt[K comparable, V any]() *RootOptionBuilder[K, V] {
	return &RootOptionBuilder[K, V]{}
}
func (ob *RootOptionBuilder[K, V]) WithCallDefaultDeleteOptions(p0 ...trcache.DeleteOption) *RootOptionBuilder[K, V] {
	ob.AppendOptions(WithCallDefaultDeleteOptions[K, V](p0...))
	return ob
}
func (ob *RootOptionBuilder[K, V]) WithCallDefaultGetOptions(p0 ...trcache.GetOption) *RootOptionBuilder[K, V] {
	ob.AppendOptions(WithCallDefaultGetOptions[K, V](p0...))
	return ob
}
func (ob *RootOptionBuilder[K, V]) WithCallDefaultSetOptions(p0 ...trcache.SetOption) *RootOptionBuilder[K, V] {
	ob.AppendOptions(WithCallDefaultSetOptions[K, V](p0...))
	return ob
}
func (ob *RootOptionBuilder[K, V]) WithDefaultDuration(p0 time.Duration) *RootOptionBuilder[K, V] {
	ob.AppendOptions(WithDefaultDuration[K, V](p0))
	return ob
}
func (ob *RootOptionBuilder[K, V]) WithKeyCodec(p0 trcache.KeyCodec[K]) *RootOptionBuilder[K, V] {
	ob.AppendOptions(WithKeyCodec[K, V](p0))
	return ob
}
func (ob *RootOptionBuilder[K, V]) WithName(p0 string) *RootOptionBuilder[K, V] {
	ob.AppendOptions(WithName[K, V](p0))
	return ob
}
func (ob *RootOptionBuilder[K, V]) WithRedisDelFunc(p0 RedisDelFunc[K, V]) *RootOptionBuilder[K, V] {
	ob.AppendOptions(WithRedisDelFunc[K, V](p0))
	return ob
}
func (ob *RootOptionBuilder[K, V]) WithRedisGetFunc(p0 RedisGetFunc[K, V]) *RootOptionBuilder[K, V] {
	ob.AppendOptions(WithRedisGetFunc[K, V](p0))
	return ob
}
func (ob *RootOptionBuilder[K, V]) WithRedisSetFunc(p0 RedisSetFunc[K, V]) *RootOptionBuilder[K, V] {
	ob.AppendOptions(WithRedisSetFunc[K, V](p0))
	return ob
}
func (ob *RootOptionBuilder[K, V]) WithValidator(p0 trcache.Validator[V]) *RootOptionBuilder[K, V] {
	ob.AppendOptions(WithValidator[K, V](p0))
	return ob
}
func (ob *RootOptionBuilder[K, V]) WithValueCodec(p0 trcache.Codec[V]) *RootOptionBuilder[K, V] {
	ob.AppendOptions(WithValueCodec[K, V](p0))
	return ob
}

type GetOptionBuilder[K comparable, V any] struct {
	trcache.GetOptionBuilderBase
}

func GetOpt[K comparable, V any]() *GetOptionBuilder[K, V] {
	return &GetOptionBuilder[K, V]{}
}
func (ob *GetOptionBuilder[K, V]) WithGetCustomOptions(p0 []interface{}) *GetOptionBuilder[K, V] {
	ob.AppendOptions(WithGetCustomOptions[K, V](p0))
	return ob
}
func (ob *GetOptionBuilder[K, V]) WithGetCustomParams(p0 interface{}) *GetOptionBuilder[K, V] {
	ob.AppendOptions(WithGetCustomParams[K, V](p0))
	return ob
}
func (ob *GetOptionBuilder[K, V]) WithGetRedisGetFunc(p0 RedisGetFunc[K, V]) *GetOptionBuilder[K, V] {
	ob.AppendOptions(WithGetRedisGetFunc[K, V](p0))
	return ob
}

type SetOptionBuilder[K comparable, V any] struct {
	trcache.SetOptionBuilderBase
}

func SetOpt[K comparable, V any]() *SetOptionBuilder[K, V] {
	return &SetOptionBuilder[K, V]{}
}
func (ob *SetOptionBuilder[K, V]) WithSetCustomParams(p0 interface{}) *SetOptionBuilder[K, V] {
	ob.AppendOptions(WithSetCustomParams[K, V](p0))
	return ob
}
func (ob *SetOptionBuilder[K, V]) WithSetDuration(p0 time.Duration) *SetOptionBuilder[K, V] {
	ob.AppendOptions(WithSetDuration[K, V](p0))
	return ob
}
func (ob *SetOptionBuilder[K, V]) WithSetRedisSetFunc(p0 RedisSetFunc[K, V]) *SetOptionBuilder[K, V] {
	ob.AppendOptions(WithSetRedisSetFunc[K, V](p0))
	return ob
}

type DeleteOptionBuilder[K comparable, V any] struct {
	trcache.DeleteOptionBuilderBase
}

func DeleteOpt[K comparable, V any]() *DeleteOptionBuilder[K, V] {
	return &DeleteOptionBuilder[K, V]{}
}
func (ob *DeleteOptionBuilder[K, V]) WithDeleteCustomParams(p0 interface{}) *DeleteOptionBuilder[K, V] {
	ob.AppendOptions(WithDeleteCustomParams[K, V](p0))
	return ob
}
func (ob *DeleteOptionBuilder[K, V]) WithDeleteRedisDelFunc(p0 RedisDelFunc[K, V]) *DeleteOptionBuilder[K, V] {
	ob.AppendOptions(WithDeleteRedisDelFunc[K, V](p0))
	return ob
}
