// Code generated by troptgen. DO NOT EDIT.

package chain

import (
	trcache "github.com/RangelReale/trcache"
	"time"
)

type RootOption = trcache.RootOption

func WithCallDefaultDeleteOptions[K comparable, V any](options ...trcache.DeleteOption) RootOption {
	return trcache.WithCallDefaultDeleteOptions[K, V](options...)
}
func WithCallDefaultGetOptions[K comparable, V any](options ...trcache.GetOption) RootOption {
	return trcache.WithCallDefaultGetOptions[K, V](options...)
}
func WithCallDefaultSetOptions[K comparable, V any](options ...trcache.SetOption) RootOption {
	return trcache.WithCallDefaultSetOptions[K, V](options...)
}
func WithIgnoreOptionNotSupported[K comparable, V any](ignoreOptionNotSupported bool) RootOption {
	return trcache.WithIgnoreOptionNotSupported[K, V](ignoreOptionNotSupported)
}
func WithName[K comparable, V any](name string) RootOption {
	return trcache.WithName[K, V](name)
}

type GetOption = trcache.GetOption

func WithGetGetStrategy[K comparable, V any](getStrategy GetStrategy[K, V]) GetOption {
	return trcache.GetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case getOptions[K, V]:
			opt.OptGetStrategy(getStrategy)
			return true
		}
		return false
	})
}
func WithGetIgnoreOptionNotSupported[K comparable, V any](ignoreOptionNotSupported bool) GetOption {
	return trcache.WithGetIgnoreOptionNotSupported[K, V](ignoreOptionNotSupported)
}
func WithGetSetOptions[K comparable, V any](options ...trcache.SetOption) GetOption {
	return trcache.GetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case getOptions[K, V]:
			opt.OptSetOptions(options...)
			return true
		}
		return false
	})
}

type SetOption = trcache.SetOption

func WithSetDuration[K comparable, V any](duration time.Duration) SetOption {
	return trcache.WithSetDuration[K, V](duration)
}
func WithSetIgnoreOptionNotSupported[K comparable, V any](ignoreOptionNotSupported bool) SetOption {
	return trcache.WithSetIgnoreOptionNotSupported[K, V](ignoreOptionNotSupported)
}
func WithSetSetStrategy[K comparable, V any](setStrategy SetStrategy[K, V]) SetOption {
	return trcache.SetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case setOptions[K, V]:
			opt.OptSetStrategy(setStrategy)
			return true
		}
		return false
	})
}

type DeleteOption = trcache.DeleteOption

func WithDeleteDeleteStrategy[K comparable, V any](deleteStrategy DeleteStrategy[K, V]) DeleteOption {
	return trcache.DeleteOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case deleteOptions[K, V]:
			opt.OptDeleteStrategy(deleteStrategy)
			return true
		}
		return false
	})
}
func WithDeleteIgnoreOptionNotSupported[K comparable, V any](ignoreOptionNotSupported bool) DeleteOption {
	return trcache.WithDeleteIgnoreOptionNotSupported[K, V](ignoreOptionNotSupported)
}

type rootOptionsImpl[K comparable, V any] struct {
	callDefaultDeleteOptions []trcache.DeleteOption
	callDefaultGetOptions    []trcache.GetOption
	callDefaultSetOptions    []trcache.SetOption
	ignoreOptionNotSupported bool
	name                     string
}

var _ options[string, string] = &rootOptionsImpl[string, string]{}

func (o *rootOptionsImpl[K, V]) OptCallDefaultDeleteOptions(options ...trcache.DeleteOption) {
	o.callDefaultDeleteOptions = options
}
func (o *rootOptionsImpl[K, V]) OptCallDefaultGetOptions(options ...trcache.GetOption) {
	o.callDefaultGetOptions = options
}
func (o *rootOptionsImpl[K, V]) OptCallDefaultSetOptions(options ...trcache.SetOption) {
	o.callDefaultSetOptions = options
}
func (o *rootOptionsImpl[K, V]) OptIgnoreOptionNotSupported(ignoreOptionNotSupported bool) {
	o.ignoreOptionNotSupported = ignoreOptionNotSupported
}
func (o *rootOptionsImpl[K, V]) OptName(name string) {
	o.name = name
}

type getOptionsImpl[K comparable, V any] struct {
	getStrategy              GetStrategy[K, V]
	ignoreOptionNotSupported bool
	setOptions               []trcache.SetOption
}

var _ getOptions[string, string] = &getOptionsImpl[string, string]{}

func (o *getOptionsImpl[K, V]) OptGetStrategy(getStrategy GetStrategy[K, V]) {
	o.getStrategy = getStrategy
}
func (o *getOptionsImpl[K, V]) OptIgnoreOptionNotSupported(ignoreOptionNotSupported bool) {
	o.ignoreOptionNotSupported = ignoreOptionNotSupported
}
func (o *getOptionsImpl[K, V]) OptSetOptions(options ...trcache.SetOption) {
	o.setOptions = options
}

type setOptionsImpl[K comparable, V any] struct {
	duration                 time.Duration
	ignoreOptionNotSupported bool
	setStrategy              SetStrategy[K, V]
}

var _ setOptions[string, string] = &setOptionsImpl[string, string]{}

func (o *setOptionsImpl[K, V]) OptDuration(duration time.Duration) {
	o.duration = duration
}
func (o *setOptionsImpl[K, V]) OptIgnoreOptionNotSupported(ignoreOptionNotSupported bool) {
	o.ignoreOptionNotSupported = ignoreOptionNotSupported
}
func (o *setOptionsImpl[K, V]) OptSetStrategy(setStrategy SetStrategy[K, V]) {
	o.setStrategy = setStrategy
}

type deleteOptionsImpl[K comparable, V any] struct {
	deleteStrategy           DeleteStrategy[K, V]
	ignoreOptionNotSupported bool
}

var _ deleteOptions[string, string] = &deleteOptionsImpl[string, string]{}

func (o *deleteOptionsImpl[K, V]) OptDeleteStrategy(deleteStrategy DeleteStrategy[K, V]) {
	o.deleteStrategy = deleteStrategy
}
func (o *deleteOptionsImpl[K, V]) OptIgnoreOptionNotSupported(ignoreOptionNotSupported bool) {
	o.ignoreOptionNotSupported = ignoreOptionNotSupported
}
