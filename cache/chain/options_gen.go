// Code generated by troptgen. DO NOT EDIT.

package chain

import (
	trcache "github.com/RangelReale/trcache"
	"time"
)

// WithDeleteStrategy sets the [DeleteStrategy] to use for the chain operation. The default is
// [DeleteStrategyDeleteAll].
func WithDeleteStrategy[K comparable, V any](deleteStrategy DeleteStrategy[K, V]) trcache.RootOption {
	const optionName = "github.com/RangelReale/trcache/cache/chain/options.DeleteStrategy"
	const optionHash = uint64(0x9611f18cf7185dfb)
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case options[K, V]:
			opt.OptDeleteStrategy(deleteStrategy)
			return true
		}
		return false
	}, optionName, optionHash)
}

// WithGetStrategy sets the [GetStrategy] to use for the chain operation. The default is
// [GetStrategyGetFirstSetPrevious].
func WithGetStrategy[K comparable, V any](getStrategy GetStrategy[K, V]) trcache.RootOption {
	const optionName = "github.com/RangelReale/trcache/cache/chain/options.GetStrategy"
	const optionHash = uint64(0x6eeb406b2a0672b8)
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case options[K, V]:
			opt.OptGetStrategy(getStrategy)
			return true
		}
		return false
	}, optionName, optionHash)
}

// WithSetStrategy sets the [SetStrategy] to use for the chain operation. The default is
// [SetStrategySetAll].
func WithSetStrategy[K comparable, V any](setStrategy SetStrategy[K, V]) trcache.RootOption {
	const optionName = "github.com/RangelReale/trcache/cache/chain/options.SetStrategy"
	const optionHash = uint64(0x1dcc48665967d4c)
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case options[K, V]:
			opt.OptSetStrategy(setStrategy)
			return true
		}
		return false
	}, optionName, optionHash)
}

// WithGetSetOptions adds options to the [Cache.Set] call done after one of the [Cache.Get] function calls succeeds.
func WithGetSetOptions[K comparable, V any](options ...trcache.SetOption) trcache.GetOption {
	const optionName = "github.com/RangelReale/trcache/cache/chain/getOptions.SetOptions"
	const optionHash = uint64(0x20cdc9d4030ddb85)
	return trcache.GetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case getOptions[K, V]:
			opt.OptSetOptions(options...)
			return true
		}
		return false
	}, optionName, optionHash)
}

type rootOptionsImpl[K comparable, V any] struct {
	callDefaultDeleteOptions []trcache.DeleteOption
	callDefaultGetOptions    []trcache.GetOption
	callDefaultSetOptions    []trcache.SetOption
	deleteStrategy           DeleteStrategy[K, V]
	getStrategy              GetStrategy[K, V]
	name                     string
	setStrategy              SetStrategy[K, V]
}

var _ options[string, string] = &rootOptionsImpl[string, string]{}

func (o *rootOptionsImpl[K, V]) OptCallDefaultDeleteOptions(options ...trcache.DeleteOption) {
	o.callDefaultDeleteOptions = options
}
func (o *rootOptionsImpl[K, V]) OptCallDefaultGetOptions(options ...trcache.GetOption) {
	o.callDefaultGetOptions = options
}
func (o *rootOptionsImpl[K, V]) OptCallDefaultSetOptions(options ...trcache.SetOption) {
	o.callDefaultSetOptions = options
}
func (o *rootOptionsImpl[K, V]) OptDeleteStrategy(deleteStrategy DeleteStrategy[K, V]) {
	o.deleteStrategy = deleteStrategy
}
func (o *rootOptionsImpl[K, V]) OptGetStrategy(getStrategy GetStrategy[K, V]) {
	o.getStrategy = getStrategy
}
func (o *rootOptionsImpl[K, V]) OptName(name string) {
	o.name = name
}
func (o *rootOptionsImpl[K, V]) OptSetStrategy(setStrategy SetStrategy[K, V]) {
	o.setStrategy = setStrategy
}

type getOptionsImpl[K comparable, V any] struct {
	setOptions []trcache.SetOption
}

var _ getOptions[string, string] = &getOptionsImpl[string, string]{}

func (o *getOptionsImpl[K, V]) OptSetOptions(options ...trcache.SetOption) {
	o.setOptions = options
}

type setOptionsImpl[K comparable, V any] struct {
	duration time.Duration
}

var _ setOptions[string, string] = &setOptionsImpl[string, string]{}

func (o *setOptionsImpl[K, V]) OptDuration(duration time.Duration) {
	o.duration = duration
}

type deleteOptionsImpl[K comparable, V any] struct{}

var _ deleteOptions[string, string] = &deleteOptionsImpl[string, string]{}
