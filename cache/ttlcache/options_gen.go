// Code generated by troptgen. DO NOT EDIT.

package trttlcache

import (
	trcache "github.com/RangelReale/trcache"
	"time"
)

type RootOption = trcache.RootOption

func WithCallDefaultDeleteOptions[K comparable, V any](options ...trcache.DeleteOption) RootOption {
	return trcache.WithCallDefaultDeleteOptions[K, V](options...)
}
func WithCallDefaultGetOptions[K comparable, V any](options ...trcache.GetOption) RootOption {
	return trcache.WithCallDefaultGetOptions[K, V](options...)
}
func WithCallDefaultSetOptions[K comparable, V any](options ...trcache.SetOption) RootOption {
	return trcache.WithCallDefaultSetOptions[K, V](options...)
}
func WithDefaultDuration[K comparable, V any](duration time.Duration) RootOption {
	const optionName = "github.com/RangelReale/trcache/cache/ttlcache/options.DefaultDuration"
	const optionHash = uint64(0xf4362521639a8ceb)
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case options[K, V]:
			opt.OptDefaultDuration(duration)
			return true
		}
		return false
	}, optionName, optionHash)
}
func WithName[K comparable, V any](name string) RootOption {
	return trcache.WithName[K, V](name)
}
func WithValidator[K comparable, V any](validator trcache.Validator[V]) RootOption {
	const optionName = "github.com/RangelReale/trcache/cache/ttlcache/options.Validator"
	const optionHash = uint64(0xb698c8bd56c6af3e)
	return trcache.RootOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case options[K, V]:
			opt.OptValidator(validator)
			return true
		}
		return false
	}, optionName, optionHash)
}

type GetOption = trcache.GetOption

func WithGetNoop[K comparable, V any](x bool) GetOption {
	return trcache.WithGetNoop[K, V](x)
}
func WithGetTouch[K comparable, V any](touch bool) GetOption {
	const optionName = "github.com/RangelReale/trcache/cache/ttlcache/getOptions.Touch"
	const optionHash = uint64(0x88193653496df4fd)
	return trcache.GetOptionFunc(func(o any) bool {
		switch opt := o.(type) {
		case getOptions[K, V]:
			opt.OptTouch(touch)
			return true
		}
		return false
	}, optionName, optionHash)
}

type SetOption = trcache.SetOption

func WithSetDuration[K comparable, V any](duration time.Duration) SetOption {
	return trcache.WithSetDuration[K, V](duration)
}

type DeleteOption = trcache.DeleteOption
type RefreshOption = trcache.RefreshOption

func WithRefreshData[K comparable, V any, RD any](data RD) RefreshOption {
	return trcache.WithRefreshData[K, V, RD](data)
}
func WithRefreshFunc[K comparable, V any, RD any](refreshFunc trcache.CacheRefreshFunc[K, V, RD]) RefreshOption {
	return trcache.WithRefreshFunc[K, V, RD](refreshFunc)
}
func WithRefreshGetOptions[K comparable, V any, RD any](options ...trcache.GetOption) RefreshOption {
	return trcache.WithRefreshGetOptions[K, V, RD](options...)
}
func WithRefreshSetOptions[K comparable, V any, RD any](options ...trcache.SetOption) RefreshOption {
	return trcache.WithRefreshSetOptions[K, V, RD](options...)
}
func WithCallDefaultRefreshOptions[K comparable, V any, RD any](options ...trcache.RefreshOption) RootOption {
	return trcache.WithCallDefaultRefreshOptions[K, V](options...)
}
func WithDefaultRefreshFunc[K comparable, V any, RD any](refreshFunc trcache.CacheRefreshFunc[K, V, RD]) RootOption {
	return trcache.WithDefaultRefreshFunc[K, V, RD](refreshFunc)
}
func WithMetrics[K comparable, V any, RD any](metrics trcache.Metrics, name string) RootOption {
	return trcache.WithMetrics[K, V](metrics, name)
}

type rootOptionsImpl[K comparable, V any] struct {
	callDefaultDeleteOptions []trcache.DeleteOption
	callDefaultGetOptions    []trcache.GetOption
	callDefaultSetOptions    []trcache.SetOption
	defaultDuration          time.Duration
	name                     string
	validator                trcache.Validator[V]
}

var _ options[string, string] = &rootOptionsImpl[string, string]{}

func (o *rootOptionsImpl[K, V]) OptCallDefaultDeleteOptions(options ...trcache.DeleteOption) {
	o.callDefaultDeleteOptions = options
}
func (o *rootOptionsImpl[K, V]) OptCallDefaultGetOptions(options ...trcache.GetOption) {
	o.callDefaultGetOptions = options
}
func (o *rootOptionsImpl[K, V]) OptCallDefaultSetOptions(options ...trcache.SetOption) {
	o.callDefaultSetOptions = options
}
func (o *rootOptionsImpl[K, V]) OptDefaultDuration(duration time.Duration) {
	o.defaultDuration = duration
}
func (o *rootOptionsImpl[K, V]) OptName(name string) {
	o.name = name
}
func (o *rootOptionsImpl[K, V]) OptValidator(validator trcache.Validator[V]) {
	o.validator = validator
}

type getOptionsImpl[K comparable, V any] struct {
	noop  bool
	touch bool
}

var _ getOptions[string, string] = &getOptionsImpl[string, string]{}

func (o *getOptionsImpl[K, V]) OptNoop(x bool) {
	o.noop = x
}
func (o *getOptionsImpl[K, V]) OptTouch(touch bool) {
	o.touch = touch
}

type setOptionsImpl[K comparable, V any] struct {
	duration time.Duration
}

var _ setOptions[string, string] = &setOptionsImpl[string, string]{}

func (o *setOptionsImpl[K, V]) OptDuration(duration time.Duration) {
	o.duration = duration
}

type deleteOptionsImpl[K comparable, V any] struct{}

var _ deleteOptions[string, string] = &deleteOptionsImpl[string, string]{}

type refreshOptionsImpl[K comparable, V any, RD any] struct {
	data       RD
	funcx      trcache.CacheRefreshFunc[K, V, RD]
	getOptions []trcache.GetOption
	setOptions []trcache.SetOption
}

var _ refreshOptions[string, string, string] = &refreshOptionsImpl[string, string, string]{}

func (o *refreshOptionsImpl[K, V, RD]) OptData(data RD) {
	o.data = data
}
func (o *refreshOptionsImpl[K, V, RD]) OptFunc(refreshFunc trcache.CacheRefreshFunc[K, V, RD]) {
	o.funcx = refreshFunc
}
func (o *refreshOptionsImpl[K, V, RD]) OptGetOptions(options ...trcache.GetOption) {
	o.getOptions = options
}
func (o *refreshOptionsImpl[K, V, RD]) OptSetOptions(options ...trcache.SetOption) {
	o.setOptions = options
}

type rootRefreshOptionsImpl[K comparable, V any, RD any] struct {
	callDefaultRefreshOptions []trcache.RefreshOption
	defaultRefreshFunc        trcache.CacheRefreshFunc[K, V, RD]
	metricsMetrics            trcache.Metrics
	metricsName               string
}

var _ optionsRefresh[string, string, string] = &rootRefreshOptionsImpl[string, string, string]{}

func (o *rootRefreshOptionsImpl[K, V, RD]) OptCallDefaultRefreshOptions(options ...trcache.RefreshOption) {
	o.callDefaultRefreshOptions = options
}
func (o *rootRefreshOptionsImpl[K, V, RD]) OptDefaultRefreshFunc(refreshFunc trcache.CacheRefreshFunc[K, V, RD]) {
	o.defaultRefreshFunc = refreshFunc
}
func (o *rootRefreshOptionsImpl[K, V, RD]) OptMetrics(metrics trcache.Metrics, name string) {
	o.metricsMetrics = metrics
	o.metricsName = name
}
